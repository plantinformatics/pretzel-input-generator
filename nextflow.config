manifest {
  homePage = 'https://github.com/plantinformatics/pretzel-input-generator/'
  description = 'Pipeline for generating data to be displayed in pretzel'
}


// Global default params, used in configs
params {
  // Pipeline Options
  outdir = "./results"
  publishmode = "copy"
  //NUMBER OF LINES TO BE PROOCESSED FOR TRIAL PURPOSES, DEFAULT null WILL PROCESS WHOLE DATASETS
  subset = -1
  //Generated dataset JSON files have 'public' field set to true by default, use --makePrivate or --make-private to set public to false
  makePrivate = false
  
  //PROTEIN SEQUENCE ALIGNMENT THRESHOLDS
  minIdentity = 0.5
  minCoverage = 0.6

  //POST PROTEIN ALIGNMENT FILTERING THRESHOLDS FOR GENERATING ALIASES
  minIdentityFilter = 0.7
  minCoverageFilter = 0.8
  
  //Empty params - may be used depending on execution profile or runtime use of -params-file json/yaml
  sequencesToPlace = []
  assembly = []

}

process {
  cache = 'lenient'
}

//Compute requirements
includeConfig 'conf/requirements.config'

profiles {
  //INPUT AND LOGIC
  BUSCOs {  //BUSCO-based pipeline
    includeConfig 'conf/dna_zoo.config'
  }
  EP { //EP+MMSeqs2 pipeline
    includeConfig 'conf/ensembl-plants.config'
  }
  TRITICEAE { //USe with EP+MMSeqs2 pipeline
    includeConfig 'conf/ensembl-plants.config'
    includeConfig 'conf/ensembl-plants-data.config'
    includeConfig 'conf/triticeae.config'
  }
  YEAST {
    includeConfig 'conf/ensembl-yeast.config'
  }
  MICROSPORIDIA {
    includeConfig 'conf/microsporidia.config'
  }
  test {
    includeConfig 'conf/test-data.config'
    process {
      errorStrategy = 'terminate'
      maxRetries = 0
    }
    // docker {
    //   runOptions = "-u \$(id -u):\$(id -g)"
    // }
  }
  //COMPUTE
  standard {
    process.executor = 'local'
  }
  docker {
    includeConfig 'conf/containers.config'
    docker {
      enabled = true
      fixOwnership = true
    }
  }
  modules {
    includeConfig 'conf/modules.config'
  }
  slurm {
    process.executor = 'slurm'
    scratch = true
      withLabel: 'rscript|rrender' {
        executor =  'local'
    }
  }
  singularity {
    includeConfig 'conf/containers.config'
    singularity {
      enabled = true
      autoMounts = true
      cacheDir = "${HOME}/singularity-images" //when distibuting the pipeline probably should point under $workDir
    }
    process {
      withLabel: groovy {
        containerOptions = '-B "$PWD":/home/groovy/.groovy'  //otherwise grabbing grapes may fail with read-only filesystem error
      }
    }
  }
}

includeConfig 'conf/publish.config'


//GENERATE REPORT https://www.nextflow.io/docs/latest/tracing.html#trace-report
report {
    enabled = true
    file = "${params.outdir}/flowinfo/report.html"
}

//GENERATE TIMELINE https://www.nextflow.io/docs/latest/tracing.html#timeline-report
timeline {
    enabled = true
    timeline.file = "${params.outdir}/flowinfo/timeline.html"
}

//GENERATE PIPELINE TRACE https://www.nextflow.io/docs/latest/tracing.html#trace-report
trace {
    enabled = true
    file = "${params.outdir}/flowinfo/trace.txt"
}

//GENERATE GRAPH REPRESENTATION OF THE PIPELINE FLOW
dag {
    enabled = true
    file = "${params.outdir}/flowinfo/dag.png"
}

//FROM: https://github.com/nf-core/rnaseq/blob/master/nextflow.config
// Function to ensure that resource requirements don't go beyond a maximum limit
// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}