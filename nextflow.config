manifest {
  homePage = 'https://github.com/plantinformatics/pretzel-input-generator/'
  description = 'Pipeline for generating data to be displayed in pretzel'
}


// Global default params, used in configs
params {
  // Pipeline Options
  outdir = "./results"
  publishmode = "copy"
}
//Default inputs
includeConfig 'conf/input_zoo.config'

//Compute requirements
includeConfig 'conf/requirements.config'

profiles {
  standard {
    process.executor = 'local'
  }
  docker {
    includeConfig 'conf/containers.config'
    docker {
      enabled = true
      fixOwnership = true
    }
  }
  slurm {
    process.executor = 'slurm'
    scratch = true
      withLabel: 'rscript|rrender' {
        executor =  'local'
    }
  }
  singularity {
    includeConfig 'conf/containers.config'
    singularity {
      enabled = true
      autoMounts = true
      cacheDir = "${HOME}/singularity-images" //when distibuting the pipeline probably should point under $workDir
    }
  }
  singularitymodule {
    process.module = 'singularity/3.0.1'
  }
}

includeConfig 'conf/publish.config'

process {
  errorStrategy = 'terminate' //'ignore'
}

//GENERATE REPORT https://www.nextflow.io/docs/latest/tracing.html#trace-report
report {
    enabled = true
    file = "${params.outdir}/flowinfo/report.html"
}

//GENERATE TIMELINE https://www.nextflow.io/docs/latest/tracing.html#timeline-report
timeline {
    enabled = true
    timeline.file = "${params.outdir}/flowinfo/timeline.html"
}

//GENERATE PIPELINE TRACE https://www.nextflow.io/docs/latest/tracing.html#trace-report
trace {
    enabled = true
    file = "${params.outdir}/flowinfo/trace.txt"
}

//FROM: https://github.com/SciLifeLab/NGI-smRNAseq/blob/29c41afd45011874ed9920c5065ddff93791e3cf/nextflow.config
// Function to ensure that resource requirements don't go beyond a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    if(obj.compareTo(params.max_memory) == 1)
      return params.max_memory
    else
      return obj
  } else if(type == 'time'){
    if(obj.compareTo(params.max_time) == 1)
      return params.max_time
    else
      return obj
  } else if(type == 'cpus'){
    return Math.min( obj, params.max_cpus )
  }
}
