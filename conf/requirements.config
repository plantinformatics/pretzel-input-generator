process {
    errorStrategy = 'retry'
    maxRetries = 3
    cpus = 2
    memory = 2.GB
    time = { check_max( 1.h * task.attempt * task.attempt, 'time' ) }
    withLabel: download {        
        errorStrategy = { task.attempt < process.maxRetries ? 'retry' : 'ignore' }        
    }
    withLabel: BUSCO {
        cpus = { check_max( (params.trialLines == null ? 20 : 2)* task.attempt, 'cpus' ) }
        memory = { check_max( (params.trialLines == null ? 256.GB : 4.GB) * task.attempt, 'memory' ) }
        time = { check_max( (params.trialLines == null ? 7.d : 2.h) * task.attempt, 'time' ) }
    }
    withLabel: MMseqs2 {
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
    }
    withLabel: minimap2 { //TODO - scale mem on ref size
    //     cpus = { check_max( 8 * task.attempt, 'cpus' ) }
    //     memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    //     time = { check_max( 30.m * task.attempt, 'time' ) }
    // }
    // withLabel: genomic { //minimap2 { //TODO - scale mem on ref size
        cpus = { check_max( 20, 'cpus' ) }
        memory = { check_max( 120.GB, 'memory' ) }
        time = { check_max( 4.h * task.attempt, 'time' ) }
    }
    withLabel: jq {
        time = { check_max( 2.h * task.attempt, 'time' ) }
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    }
    withLabel: mem {
        cpus = { check_max( 2 * task.attempt, 'cpus' ) }
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
    }
}

params {
  // Defaults to be overwritten
  max_memory = 256.GB
  max_cpus = 20
  max_time = 7.d
}

//in script: java -Xmx${task.memory.toGiga()}g  -jar \$PICARD_HOME/picard.jar \
